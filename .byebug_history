c
quit
app.opts[:racky_dacks][:runner]
app.opts[:racky_dacks]
app.opts
quit
RackyDacks::App.opts
RackyDacks::App
app
quit
roda_class.opts[:racky_dacks][:runner]
RackyDacks::Job.method(:perform_async)
RackyDacks::Job
params
handler
roda_class.opts[:racky_dacks][:runner]
format
quit
handler
params
q
params
q
rx =~ "event.png"
rx =~ "event"
rx.match "event"
rx.match "event.png"
rx.match "events"
rx = /#{key}\.?(\w+)/
handler
key
c
q
app.(env)
env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/social", "SCRIPT_NAME" => ""}
q
app.(env)
env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/social", "SCRIPT_NAME" => ""}
quit
app.(env)
env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/social", "SCRIPT_NAME" => ""}
q
app.(env)
env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/social", "SCRIPT_NAME" => ""}
quit
app.(env)
env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/social", "SCRIPT_NAME" => ""}
app
RackyDacks::App.app.()
RackyDacks::App.app
RackyDacks::App.new
RackyDacks.new
app.new
app
c
app.opts[:racky_dacks_handlers][:event]
app.opts[:racky_dacks_handlers]
app.opts.keys
app.opts
app
tracker
quit
c
quit
req 
@app = app
q
req "/social", foo: "bar"
req "/social"
req "/"
@app = app
app = a.app
continue
  end
    @app.call(env)
    env = {"REQUEST_METHOD" => "GET", "PATH_INFO" => "/", "SCRIPT_NAME" => ""}.merge(env)
    end
      env['PATH_INFO'] = path.dup
    else
      env = path
    if path.is_a?(Hash)
  def req(path='/', env={})
a.app
a.application
a
